# -*- coding: iso-8859-15 -*-
#!/usr/bin/env python

# Process XML file generated by GestIB app, and load users to Google domain
# Author: Miquel A. Cabot

# URL Fitxer gestib: https://www3.caib.es/xestib/alumnat/importacio/exportacioDadesCentre.xml?codiAny=2017

from __future__ import print_function
import httplib2
import os
import re
import unicodedata 
import csv
  
from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage

import xml.etree.ElementTree as ET
import argparse
  
# Input parameters of this script
parser = argparse.ArgumentParser(parents=[tools.argparser], description='Processa el fitxer XML generat pel GestIB i el permet transformar en usuaris de domini Google')
parser.add_argument("-s", "--secret", dest='client_secret_file', required=True,
                    help="Client secret file, generated  https://developers.google.com/admin-sdk/directory/v1/quickstart/python")
parser.add_argument("-g", "--gestib", dest='gestib_xml_file', required=True,
                    help="XML Generated by GestIB application")
# TODO Filter teachers
# TODO Filter students
# TODO Nomes creacio
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument("-v", "--view", action="store_true", help="View changes between Google domain and GestIB XML")
group.add_argument("-a", "--apply", action="store_true", help="Apply changes in Google domain")
group.add_argument("-d", "--domain", action="store_true", help="View users in Google domain")
group.add_argument("-x", "--xml", action="store_true", help="View users in GestIB XML")
group.add_argument("-c", "--csv", action="store_true", help="Generate CSV for LDAP of Google domain users")
args = parser.parse_args()

# If modifying these scopes, delete your previously saved credentials
# at ~/.credentials/admin-directory_v1-python-quickstart.json
SCOPES = ['https://www.googleapis.com/auth/admin.directory.user',
          'https://www.googleapis.com/auth/admin.directory.group',
          'https://www.googleapis.com/auth/admin.directory.orgunit']
APPLICATION_NAME = 'Directory API Python Quickstart'
GOOGLE_DOMAIN = '@iesemilidarder.com'
DEFAULT_PASSWORD = '12345678'

def remove_accents(s):
    # Remove accents, ñ, ...
    #s = ''.join((c for c in unicodedata.normalize('NFD',unicode(s)) if unicodedata.category(c) != 'Mn'))
    s = s.replace("á","a").replace("à","a").replace("é","e").replace("è","e").replace("í","i").replace("ì","i")
    s = s.replace("ó","o").replace("ò","o").replace("ú","u").replace("ù","u").replace("ñ","n")
    s = s.replace("Á","a").replace("À","a").replace("É","e").replace("È","e").replace("Í","i").replace("Ì","i")
    s = s.replace("Ó","o").replace("Ò","o").replace("Ú","u").replace("Ù","u").replace("Ñ","n")
#    s = s.lower()    
    return s  #.decode()
  
def get_normalizedname(name):
    tokens = remove_accents(name.lower()).split()
    names = []
    # Words with compound names and surnames
    especial_tokens = ['da', 'de', 'di', 'do', 'del', 'la', 'las', 'le', 'los', 'mac', 'mc', 'van', 'von', 'y', 'i', 'san', 'santa','al','el']
    for token in tokens: 
        if not token in especial_tokens:
            names.append(token)
    if len(names)>=1:       # If name exists (with name or surname)
        return (names[0])
    else:                   # If name not exists (without name or surname)
        return "_"
  
class User:
    def __init__(self, id, name, surname, surname1="", surname2="", email="", suspended=False, teacher=False, groups=[]):
        self.__id = id
        self.__name = name.encode("utf-8")
        self.__surname = surname.encode("utf-8")
        self.__surname1 = surname1.encode("utf-8")
        self.__surname2 = surname2.encode("utf-8")
        self.__email = email.encode("utf-8")
        self.__suspended = suspended
        self.__teacher = teacher
        self.__groups = groups

    @property
    def id(self):
        return self.__id

    @property
    def name(self):
        return self.__name

    @property
    def surname(self):
        return self.__surname
    
    @property
    def surname1(self):
        return self.__surname1
    
    @property
    def surname2(self):
        return self.__surname2
      
    @property
    def email(self):
        if self.__email:      # If an email exists, we return it
            return self.__email
        elif self.__teacher:  # If we need to generate a teacher email
            email = get_normalizedname(self.__name)[0] + get_normalizedname(self.__surname1)
            self.__email = email+GOOGLE_DOMAIN
            return self.__email
        else:                 # If we need to generate an student email
            email = get_normalizedname(self.__name)[0] + get_normalizedname(self.__surname1)[0]  + get_normalizedname(self.__surname2)[0]
            self.__email = email+'{:02d}'.format(0)+GOOGLE_DOMAIN
            return self.__email
          
    @property
    def user(self):
        email = self.email
        return email.replace(GOOGLE_DOMAIN, "")

    @property
    def suspended(self):
        return self.__suspended

    @property
    def teacher(self):
        return self.__teacher

    @property
    def groups(self):
        return self.__groups
      
    @property
    def getgroupswithprefix(self):
        gr = []
        for group in self.__groups:
            if group.startswith("alumnat.") or group.startswith("ee."):
                gr = gr + [group]
        return gr
      
    @property
    def setprefixtogroups(self):
        gr = []
        for group in self.__groups:
            if self.__teacher:
                gr = gr + ["ee."+group]
            else:
                gr = gr + ["alumnat."+group]
        return gr
    
    def __str__(self):
        return '{0:7s} : {1:45s} ({2:40s}) {3:40s}'.format('TEACHER' if self.teacher else 'STUDENT' ,self.surname+", "+self.name, self.email, str(self.groups)) 
          
def get_credentials():
    """Gets valid user credentials from storage.

    If nothing has been stored, or if the stored credentials are invalid,
    the OAuth2 flow is completed to obtain the new credentials.

    Returns:
        Credentials, the obtained credential.
    """
    home_dir = os.path.expanduser('~')
    credential_dir = os.path.join(home_dir, '.credentials')
    if not os.path.exists(credential_dir):
        os.makedirs(credential_dir)
    credential_path = os.path.join(credential_dir,
                                   'admin-directory_v1-python-quickstart.json')

    store = Storage(credential_path)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(args.client_secret_file, SCOPES)
        flow.user_agent = APPLICATION_NAME
        if args:
            credentials = tools.run_flow(flow, store, args)
        else: # Needed only for compatibility with Python 2.6
            credentials = tools.run(flow, store)
        print('Storing credentials to ' + credential_path)
    return credentials

def getdomaingroups():
    print('Loading domain groups...')
    domaingroups = {}
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build('admin', 'directory_v1', http=http)
    
    results = service.groups().list(customer='my_customer', maxResults=1000000).execute()
    groups = results.get('groups', [])

    cont = 0
    for group in groups:
        cont+=1    
        
        # We read the members of this group
        print('Loading members of "'+group['email'].replace(GOOGLE_DOMAIN,"")+'" group...')
        membersgroup = []
        results = service.members().list(groupKey=group['id'], maxResults=1000000).execute()
        members = results.get('members', [])
        for member in members:
            membersgroup = membersgroup+[member["email"]]
            
        domaingroups[group['email'].replace(GOOGLE_DOMAIN,"")] =  {
                                        'id': group['id'],
                                        'name': group['name'].encode("utf-8"),
                                        'members': membersgroup
                                    }
        
    print('{0} groups loaded'.format(cont))
    return domaingroups
    
def getdomainusers(domaingroups):
    """Shows basic usage of the Google Admin SDK Directory API.

    Creates a Google Admin SDK API service object and outputs a list of first
    10 users in the domain.
    """
    domainusers = {}
    domainuserswithoutcode = {}
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build('admin', 'directory_v1', http=http)

    print('Loading domain users...')
    
    # INICI Carregam els usuaris 500 a 500, que és el valor màxim de maxResults, paginant la resta
    users = []
    response = service.users().list(customer='my_customer', orderBy='email', maxResults=500).execute()
    
    if 'users' in response:
      users.extend(response['users'])

    while 'nextPageToken' in response:
      page_token = response['nextPageToken']
      response = service.users().list(customer='my_customer', orderBy='email', maxResults=500,
                                         pageToken=page_token).execute()
      users.extend(response['users'])
    # FI Carregam els usuaris 500 a 500, que és el valor màxim de maxResults, paginant la resta
    
    cont = 0
    for user in users:
        cont+=1
        
        member = []
        for key, group in domaingroups.items():
            for email in group['members']:
                if user['primaryEmail']==email:
                    # If the email of this user is in a domain group...
                    member = member+[key.encode("utf-8")]
        #Organitzacio esta a user['orgUnitPath']        
        if ('externalIds' in user):     # Si tenen una ID externa (és a dir el Employee ID amb el codi de usuari GestIB)   
            codi = user['externalIds'][0]['value']
            domainuser = User(id        = codi,
                              name      = user['name']['givenName'],
                              surname   = user['name']['familyName'],
                              email     = user['primaryEmail'],
                              suspended = user["suspended"],
                              teacher   = "professor" in user['orgUnitPath'].lower(),
                              groups    = member
                             )
            domainusers[codi] = domainuser

            # print(u'{0} ({1})'.format(user['primaryEmail'], user['name']['fullName']))
            # if(user["suspended"]):
            #     print ("suspended")
            # if ('externalIds' in user):
            #     print(u'{0}'.format(user['externalIds'][0]['value']))
            #     print("")
        else:   ## Si no tenen una ID externa (és a dir el Employee ID amb el codi de usuari GestIB)
            domainuser = User(id        = "",
                              name      = user['name']['givenName'],
                              surname   = user['name']['familyName'],
                              email     = user['primaryEmail'],
                              suspended = user["suspended"],
                              teacher   = "professor" in user['orgUnitPath'].lower(),
                              groups    = member
                             )
            domainuserswithoutcode[cont] = domainuser

    print('{0} users loaded'.format(cont))
    return (domainusers, domainuserswithoutcode)

def getgroupemails(name, isstudent):
    name = name.lower()
    email = ""
    curs = re.findall('\d+', name)  # We get the course from the numbers in the string
    grup = name[-1:]                # We get the group name from the last char of the string
    if "batx" in name:
        email = "bat"
        for c in curs:
            email = email+c         
        email = email + grup
        return [email]
    elif "eso" in name:
        email = "eso"
        for c in curs:
            email = email+c
        email = email + grup
        return [email]
    elif "ifc21" in name:
        if grup == 'a':
            return ["smx1"]
        elif grup == 'b':
            return ["smx2"]
        elif grup == 'c' and isstudent:     # Si és estudiant, feim que grup C de SMX sigui de 1r i 2n
            return ["smx1","smx2"]
        else:
            return []
    elif "ifc31" in name:
        if grup == 'a':
            return ["asix1"]
        elif grup == 'b':
            return ["asix2"]
        elif grup == 'c' and isstudent:     # Si és estudiant, feim que grup C de ASIX sigui de 1r i 2n
            return ["asix1","asix2"]
        else:
            return []
    return email
    
def getxmlgroups():
    print('Loading XML groups...')
    xmlgroups = {}
    tree = ET.parse(args.gestib_xml_file)
    root = tree.getroot()
    cont = 0
    
    courses = root.find("CURSOS")
    for course in courses:
        for group in course.iter("GRUP"):
            cont+=1
            xmlgroups[group.get("codi")] = {
                                             'emailsstudents': getgroupemails(course.get("descripcio")+" "+group.get("nom"), True),
                                             'emailsteachers': getgroupemails(course.get("descripcio")+" "+group.get("nom"), False),
                                             'name': course.get("descripcio")+" "+group.get("nom")
                                           }
    print('{0} groups loaded'.format(cont))
    return xmlgroups
    
def getxmltimetable(xmlgroups): 
    print('Loading XML timetable...')
    xmltimetable = {}
    tree = ET.parse(args.gestib_xml_file)
    root = tree.getroot()
    cont = 0
    
    timetable = root.find("HORARIP")
    for session in timetable:
        cont+=1
        if session.get("grup"):
            groupsarray = xmlgroups[session.get("grup")]["emailsteachers"]
            if session.get("professor") in xmltimetable.keys():
                xmltimetable[session.get("professor")] = xmltimetable[session.get("professor")]  + groupsarray
                # list(set()) to delete duplicates in the array
                xmltimetable[session.get("professor")] = list(set(xmltimetable[session.get("professor")]))
            else:
                xmltimetable[session.get("professor")] = groupsarray
    print('{0} sessions loaded'.format(cont))
    return xmltimetable
    
def getxmlusers(xmlgroups, xmltimetable):
    print('Loading XML users...')
    xmlusers = {}
    tree = ET.parse(args.gestib_xml_file)
    root = tree.getroot()
    cont = 0
    
    students = root.find("ALUMNES")
    for student in students:
        codi = student.get("codi")
        if student.get("grup"):
            studentgroupemailsarray = xmlgroups[student.get("grup")]["emailsstudents"]
        else:
            studentgroupemailsarray = []
        xmluser = User(id        = codi,
                       name      = student.get("nom").title(),
                       surname   = (student.get("ap1")+" "+student.get("ap2")).title().strip(),
                       surname1  = student.get("ap1").title().strip(),
                       surname2  = student.get("ap2").title().strip(),
                       suspended = False,
                       teacher   = False,
                       groups    = studentgroupemailsarray
                      )
        xmlusers[codi] = xmluser
        cont+=1

    teachers = root.find("PROFESSORS")
    for teacher in teachers:
        codi = teacher.get("codi")
        if codi in xmltimetable:
            member = xmltimetable[codi]
        else:
            member = []
        xmluser = User(id        = codi,
                       name      = teacher.get("nom").title(),
                       surname   = (teacher.get("ap1")+" "+teacher.get("ap2")).title().strip(),
                       surname1  = teacher.get("ap1").title().strip(),
                       surname2  = teacher.get("ap2").title().strip(),
                       suspended = False,
                       teacher   = True,
                       groups    = member
                      )
        xmlusers[codi] = xmluser
        cont+=1
    print('{0} users loaded'.format(cont))
    return xmlusers
  
def deletedomainusers(domainusers, xmlusers, aplicar = False):
    cont = 0
    if aplicar:
        credentials = get_credentials()
        http = credentials.authorize(httplib2.Http())
        service = discovery.build('admin', 'directory_v1', http=http)
        
    for key, value in domainusers.items():  # For every domain user
        if not value.suspended:             # If it's active
            if not key in xmlusers:         # It doesn't exists in XML
                print('SUSPEND : '+str(value))
                cont+=1
                if aplicar:
                    # Suspend domain user
                    service.users().update(
                            userKey = value.email, 
                            body= {'suspended': True}
                        ).execute()
                    # Remove from all groups
                    for gr in value.groups:
                        # https://developers.google.com/admin-sdk/directory/v1/reference/members/delete
                        service.members().delete(
                                groupKey = gr+GOOGLE_DOMAIN,
                                memberKey = value.email
                            ).execute()

    return cont
  
def adddomainusers(domainusers, xmlusers, aplicar = False):
    contc = 0
    conta = 0
    contg = 0
    if aplicar:
        credentials = get_credentials()
        http = credentials.authorize(httplib2.Http())
        service = discovery.build('admin', 'directory_v1', http=http)
    
    for key, value in xmlusers.items():  # For every XML user
        if not key in domainusers:       # It doesn't exists in domain
            # Email pot ser repetit, comprovar-ho!!
            if not value.teacher:
                n = 0
                emailrepeated = True
                while emailrepeated:
                    for dkey, dvalue in domainusers.items():
                        if (dvalue.email[0:3] == value.email[0:3]):
                            if (dvalue.email[3:5].isdigit()):
                                if int(dvalue.email[3:5]) >= int(value.email[3:5]):
                                    n = int(dvalue.email[3:5])+1
                                    value.email = value.email[:3]+'{:02d}'.format(n)+GOOGLE_DOMAIN
                        else:
                            emailrepeated = False
            # Afegim l'usuari que cream al diccionari de usuaris del domini
            domainusers[value.id] = User(id        = value.id,
                                         name      = "",
                                         surname   = "",
                                         email     = value.email,
                                         suspended = False,
                                         teacher   = value.teacher
                                        )
            print('CREATE  : '+str(value))
            contc+=1
            if aplicar:
                # Create domain user
                # https://developers.google.com/admin-sdk/reseller/v1/codelab/end-to-end
                try:
                    service.users().insert(
                        body={ 'primaryEmail': value.email, 
                               'name': { 'givenName': value.name, 'familyName': value.surname }, 
                               'orgUnitPath': '/Professorat' if value.teacher else '/Alumnat',
                               'externalIds': [{ 'type': 'organization', 'value': value.id }], 
                               'suspended': False,
                               'changePasswordAtNextLogin': True,
                               'password': DEFAULT_PASSWORD}
                        ).execute()

                    # Insert all "ee." or "alumnat." groups
                    for gr in value.setprefixtogroups:
                        # https://developers.google.com/admin-sdk/directory/v1/reference/members/insert
                        service.members().insert(
                                groupKey = gr+GOOGLE_DOMAIN,
                                body = {'email': value.email}
                            ).execute()
                    # TODO Insert "tutors" group
                except:
                    print("Error creating user")
        else:
            domainuser = domainusers[key]
            if domainuser.suspended:  # It exists in domain, but is suspended
                print('ACTIVATE: '+str(value))
                conta+=1
                if aplicar:
                    # Activate domain user
                    service.users().update(
                            userKey = domainuser.email,
                            body = {'suspended': False}
                        ).execute()

            # Tant si estava actiu com no, existeix, i per tant, actualitzar els grups "ee.", "alumnat." i  "tutors"
            # Insert and delete all "ee." or "alumnat." groups
            # TODO Insert and delete "tutors" group
            deletegroups = list(set(domainuser.getgroupswithprefix)-set(value.setprefixtogroups))
            creategroups = list(set(value.setprefixtogroups)-set(domainuser.getgroupswithprefix))
            if (deletegroups or creategroups) and not domainuser.suspended:
                print("GROUPS  : "+'{0:7s} : {1:45s} {2}'.format('' ,domainuser.surname+", "+domainuser.name, "INSERT "+str(creategroups)+" DELETE "+str(deletegroups)))
                contg+=1
            if aplicar:
                for gr in creategroups:
                    # https://developers.google.com/admin-sdk/directory/v1/reference/members/insert
                    service.members().insert(
                            groupKey = gr+GOOGLE_DOMAIN,
                            body = {'email': domainuser.email}
                        ).execute()
                for gr in deletegroups:
                    # https://developers.google.com/admin-sdk/directory/v1/reference/members/delete
                    service.members().delete(
                            groupKey = gr+GOOGLE_DOMAIN,
                            memberKey = domainuser.email
                        ).execute()

    return (contc, conta, contg)
  
def viewdomainusers(domainusers, domainuserswithoutcode, csvoutput = False):
    cont = 0
    if csvoutput:
        f = open('users.csv', 'w')
        f.write("user,defaultpassword,completename,surname,name,group\r\n")
    for key, value in domainusers.items():  # For every domain user with ID
        if not value.suspended:
            if csvoutput:
                f.write('{0},{1},{2} {3},{4},{5},{6}\r\n'.format(value.user, DEFAULT_PASSWORD, value.name, value.surname, value.surname, value.name, 'TEACHER' if value.teacher else (value.getgroupswithprefix[0].replace("alumnat.", "") if value.getgroupswithprefix else "-")))
            else:
                print('GOOGLE USER WITH ID:    '+str(value))
            cont+=1
    for key, value in domainuserswithoutcode.items():  # For every domain user without ID
        if not value.suspended:
            if csvoutput:
                f.write('{0},{1},{2} {3},{4},{5},{6}\r\n'.format(value.user, DEFAULT_PASSWORD, value.name, value.surname, value.surname, value.name, 'TEACHER' if value.teacher else (value.getgroupswithprefix[0].replace("alumnat.", "") if value.getgroupswithprefix else "-")))
            else:
                print('GOOGLE USER WITHOUT ID: '+str(value))
            cont+=1
    if csvoutput:
        f.close
        print("File saved as users.csv")
    return cont

def viewxmlusers(xmlusers):
    cont = 0
    for key, value in xmlusers.items():  # For every user in XML
        print('XML USER: '+str(value))
        cont+=1
    return cont

if __name__ == '__main__':
    if args.view or args.apply or args.xml:
        xmlgroups = getxmlgroups()
        xmltimetable = getxmltimetable(xmlgroups)
        xmlusers = getxmlusers(xmlgroups, xmltimetable)  
        
    if args.view or args.apply or args.domain or args.csv:
        domaingroups = getdomaingroups()
        (domainusers, domainuserswithoutcode) = getdomainusers(domaingroups)

    if args.view:       # View changes
        #d = adddomaingroups(xmlgroups)
        d = deletedomainusers(domainusers, xmlusers)
        (c, a, g) = adddomainusers(domainusers, xmlusers)
        print('{0} users will be suspended'.format(d))
        print('{0} users will be created'.format(c))
        print('{0} users will be activated'.format(a))
        print('{0} users will change their group membership'.format(g))
    elif args.apply:     # Apply changes to domain
        d = deletedomainusers(domainusers, xmlusers, True)
        (c, a, g) = adddomainusers(domainusers, xmlusers, True)
        print('{0} users have been suspended'.format(d))
        print('{0} users have been created'.format(c))
        print('{0} users have been activated'.format(a))
        print('{0} users have been changed their group membership'.format(g))
    elif args.domain: #View users in Google domain
        d = viewdomainusers(domainusers, domainuserswithoutcode)
        print('There are {0} users at Google domain'.format(d))
    elif args.xml:    #View users in GestIB XML
        d = viewxmlusers(xmlusers)
        print('There are {0} users at XML file'.format(d))
    elif args.csv:
        # Generate CSV with format "user;DEFAULT_PASSWORD;complete_name"
        viewdomainusers(domainusers, domainuserswithoutcode, csvoutput=True)
        
#     for key, value in xmlgroups.items():
#          print(key)
#          print(value)

# TODO: Crear grups si no existeixen
# TODO: Hi ha grups amb 2 tutors?? tutor2

